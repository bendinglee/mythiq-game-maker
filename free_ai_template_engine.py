"""
Free AI Template Engine - Revolutionary AI-Powered Game Template Generator
Uses FREE APIs (Groq, Hugging Face) to analyze prompts and generate unique game templates
"""

import os
import json
import re
import requests
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

@dataclass
class GameConcept:
    """Structured representation of analyzed game concept"""
    genre: str
    mechanics: List[str]
    theme: str
    visual_style: str
    complexity: str
    objective: str
    target_audience: str
    estimated_playtime: str

@dataclass
class GameTemplate:
    """Complete game template generated by AI"""
    concept: GameConcept
    game_structure: Dict[str, Any]
    visual_design: Dict[str, Any]
    gameplay_mechanics: Dict[str, Any]
    ui_elements: Dict[str, Any]
    code_architecture: Dict[str, Any]

class FreeAITemplateEngine:
    """AI-powered game template generation engine using FREE APIs"""
    
    def __init__(self):
        # Groq API (FREE - you already have this!)
        self.groq_api_key = os.environ.get('GROQ_API_KEY')
        self.groq_base_url = "https://api.groq.com/openai/v1/chat/completions"
        
        # Hugging Face API (FREE)
        self.hf_api_key = os.environ.get('HUGGINGFACE_API_KEY', '')
        self.hf_base_url = "https://api-inference.huggingface.co/models"
        
        # Game genre classifications
        self.genres = {
            'action': ['shooter', 'fighting', 'platformer', 'beat-em-up'],
            'puzzle': ['match-3', 'tetris', 'logic', 'word', 'physics'],
            'strategy': ['tower-defense', 'rts', 'turn-based', 'city-builder'],
            'adventure': ['rpg', 'exploration', 'quest', 'story-driven'],
            'simulation': ['life-sim', 'business', 'farming', 'vehicle'],
            'racing': ['arcade', 'simulation', 'kart', 'endless-runner'],
            'sports': ['soccer', 'basketball', 'tennis', 'golf'],
            'casual': ['idle', 'clicker', 'time-management', 'social']
        }
        
        # Visual style categories
        self.visual_styles = {
            'minimalist': 'Clean, simple shapes with limited color palette',
            'retro': '8-bit or 16-bit inspired pixel art style',
            'modern': 'Contemporary flat design with gradients and shadows',
            'fantasy': 'Magical, mystical themes with rich colors',
            'sci-fi': 'Futuristic, technological aesthetic with neon accents',
            'cartoon': 'Playful, colorful, character-focused design',
            'realistic': 'Detailed, lifelike graphics and textures',
            'abstract': 'Geometric, artistic, non-representational design'
        }
    
    def _call_groq_api(self, messages: List[Dict], temperature: float = 0.3, max_tokens: int = 1000) -> str:
        """Call Groq API (FREE) for AI responses"""
        
        if not self.groq_api_key:
            raise Exception("GROQ_API_KEY not found in environment variables")
        
        headers = {
            "Authorization": f"Bearer {self.groq_api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "llama3-8b-8192",  # Free Groq model
            "messages": messages,
            "temperature": temperature,
            "max_tokens": max_tokens
        }
        
        try:
            response = requests.post(self.groq_base_url, headers=headers, json=data, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            return result['choices'][0]['message']['content'].strip()
            
        except Exception as e:
            print(f"Groq API error: {e}")
            raise Exception(f"Groq API call failed: {str(e)}")
    
    def _call_huggingface_api(self, model: str, prompt: str) -> str:
        """Call Hugging Face API (FREE) for AI responses"""
        
        headers = {}
        if self.hf_api_key:
            headers["Authorization"] = f"Bearer {self.hf_api_key}"
        
        data = {"inputs": prompt}
        
        try:
            response = requests.post(f"{self.hf_base_url}/{model}", headers=headers, json=data, timeout=30)
            
            if response.status_code == 503:
                # Model is loading, wait and retry
                import time
                time.sleep(10)
                response = requests.post(f"{self.hf_base_url}/{model}", headers=headers, json=data, timeout=30)
            
            response.raise_for_status()
            result = response.json()
            
            if isinstance(result, list) and len(result) > 0:
                return result[0].get('generated_text', prompt)
            
            return str(result)
            
        except Exception as e:
            print(f"Hugging Face API error: {e}")
            # Fallback to Groq if HF fails
            return self._call_groq_api([{"role": "user", "content": prompt}])
    
    def analyze_prompt(self, prompt: str) -> GameConcept:
        """Use FREE AI to analyze user prompt and extract game concept"""
        
        analysis_prompt = f"""
        Analyze this game description and extract key information:
        "{prompt}"
        
        Provide a JSON response with these fields:
        {{
            "genre": "primary game genre (action/puzzle/strategy/adventure/simulation/racing/sports/casual)",
            "mechanics": ["list", "of", "core", "gameplay", "mechanics"],
            "theme": "visual/narrative theme (fantasy/sci-fi/modern/retro/abstract/nature/space/etc)",
            "visual_style": "visual aesthetic (minimalist/retro/modern/fantasy/sci-fi/cartoon/realistic/abstract)",
            "complexity": "game complexity (simple/medium/complex)",
            "objective": "main game objective in one sentence",
            "target_audience": "target player demographic (kids/teens/adults/all)",
            "estimated_playtime": "typical session length (1-5min/5-15min/15-30min/30min+)"
        }}
        
        Focus on extracting the core game concept, not implementation details.
        If information is unclear, make reasonable assumptions based on context.
        Respond ONLY with valid JSON, no other text.
        """
        
        try:
            messages = [
                {"role": "system", "content": "You are a game design expert who analyzes game concepts and extracts structured information. Always respond with valid JSON only."},
                {"role": "user", "content": analysis_prompt}
            ]
            
            analysis_text = self._call_groq_api(messages, temperature=0.3, max_tokens=500)
            
            # Extract JSON from response
            json_match = re.search(r'\{.*\}', analysis_text, re.DOTALL)
            if json_match:
                analysis_data = json.loads(json_match.group())
            else:
                # Try parsing the entire response
                analysis_data = json.loads(analysis_text)
            
            return GameConcept(
                genre=analysis_data.get('genre', 'action'),
                mechanics=analysis_data.get('mechanics', ['movement', 'interaction']),
                theme=analysis_data.get('theme', 'modern'),
                visual_style=analysis_data.get('visual_style', 'modern'),
                complexity=analysis_data.get('complexity', 'medium'),
                objective=analysis_data.get('objective', 'Complete the challenge'),
                target_audience=analysis_data.get('target_audience', 'all'),
                estimated_playtime=analysis_data.get('estimated_playtime', '5-15min')
            )
            
        except Exception as e:
            print(f"AI analysis error: {e}")
            # Fallback to basic analysis
            return self._fallback_analysis(prompt)
    
    def generate_template(self, concept: GameConcept) -> GameTemplate:
        """Generate complete game template using FREE AI"""
        
        template_prompt = f"""
        Create a complete game template for this concept:
        
        Genre: {concept.genre}
        Mechanics: {', '.join(concept.mechanics)}
        Theme: {concept.theme}
        Visual Style: {concept.visual_style}
        Complexity: {concept.complexity}
        Objective: {concept.objective}
        
        Generate a comprehensive game template as JSON with these sections:
        
        {{
            "game_structure": {{
                "title": "engaging game title",
                "rules": ["rule1", "rule2", "rule3"],
                "win_condition": "how to win",
                "lose_condition": "how to lose",
                "scoring_system": "how scoring works",
                "difficulty_progression": "how difficulty increases"
            }},
            "visual_design": {{
                "color_palette": ["#color1", "#color2", "#color3", "#color4"],
                "background_style": "CSS background description",
                "player_design": "player character/object description",
                "enemy_design": "enemy/obstacle description",
                "ui_style": "UI element styling approach",
                "animation_style": "animation and effects approach"
            }},
            "gameplay_mechanics": {{
                "movement": "movement system description",
                "interaction": "how player interacts with game",
                "physics": "physics system if needed",
                "collision": "collision detection approach",
                "spawning": "how enemies/items spawn",
                "progression": "how game progresses"
            }},
            "ui_elements": {{
                "hud": ["score", "health", "level", "other"],
                "controls": "control scheme description",
                "feedback": "visual/audio feedback systems",
                "menus": "menu structure if needed"
            }},
            "code_architecture": {{
                "html_structure": "main HTML elements needed",
                "css_classes": ["class1", "class2", "class3"],
                "js_functions": ["function1", "function2", "function3"],
                "game_loop": "game loop structure description",
                "event_handling": "event handling approach"
            }}
        }}
        
        Make this template specific, detailed, and implementable. Focus on creating a unique, engaging game experience.
        Ensure all colors are valid hex codes. Make mechanics fun and intuitive.
        Respond ONLY with valid JSON, no other text.
        """
        
        try:
            messages = [
                {"role": "system", "content": "You are a professional game designer who creates detailed, implementable game templates. Always respond with valid JSON only."},
                {"role": "user", "content": template_prompt}
            ]
            
            template_text = self._call_groq_api(messages, temperature=0.7, max_tokens=2000)
            
            # Extract JSON from response
            json_match = re.search(r'\{.*\}', template_text, re.DOTALL)
            if json_match:
                template_data = json.loads(json_match.group())
            else:
                template_data = json.loads(template_text)
            
            return GameTemplate(
                concept=concept,
                game_structure=template_data.get('game_structure', {}),
                visual_design=template_data.get('visual_design', {}),
                gameplay_mechanics=template_data.get('gameplay_mechanics', {}),
                ui_elements=template_data.get('ui_elements', {}),
                code_architecture=template_data.get('code_architecture', {})
            )
            
        except Exception as e:
            print(f"Template generation error: {e}")
            # Fallback to basic template
            return self._fallback_template(concept)
    
    def enhance_template(self, template: GameTemplate, enhancement_focus: str = "quality") -> GameTemplate:
        """Use FREE AI to enhance and optimize the generated template"""
        
        enhancement_prompt = f"""
        Enhance this game template to improve {enhancement_focus}:
        
        Current Template:
        {json.dumps({
            'game_structure': template.game_structure,
            'visual_design': template.visual_design,
            'gameplay_mechanics': template.gameplay_mechanics
        }, indent=2)}
        
        Provide enhanced version focusing on:
        - Professional visual quality (8-9/10 level)
        - Smooth, engaging gameplay mechanics
        - Modern, responsive design
        - Mobile optimization
        - Performance optimization
        
        Return the enhanced template in the same JSON format, but with improved details.
        Add specific CSS properties, animation timings, and implementation details.
        Respond ONLY with valid JSON, no other text.
        """
        
        try:
            messages = [
                {"role": "system", "content": "You are a senior game developer who optimizes game templates for professional quality and performance. Respond with JSON only."},
                {"role": "user", "content": enhancement_prompt}
            ]
            
            enhanced_text = self._call_groq_api(messages, temperature=0.5, max_tokens=1500)
            
            # Extract JSON from response
            json_match = re.search(r'\{.*\}', enhanced_text, re.DOTALL)
            if json_match:
                enhanced_data = json.loads(json_match.group())
                
                # Update template with enhanced data
                template.game_structure.update(enhanced_data.get('game_structure', {}))
                template.visual_design.update(enhanced_data.get('visual_design', {}))
                template.gameplay_mechanics.update(enhanced_data.get('gameplay_mechanics', {}))
            
            return template
            
        except Exception as e:
            print(f"Template enhancement error: {e}")
            return template
    
    def _fallback_analysis(self, prompt: str) -> GameConcept:
        """Fallback analysis when AI fails"""
        prompt_lower = prompt.lower()
        
        # Simple keyword-based analysis
        genre = 'action'
        if any(word in prompt_lower for word in ['puzzle', 'tetris', 'match', 'solve']):
            genre = 'puzzle'
        elif any(word in prompt_lower for word in ['race', 'car', 'speed', 'drive']):
            genre = 'racing'
        elif any(word in prompt_lower for word in ['adventure', 'explore', 'quest']):
            genre = 'adventure'
        elif any(word in prompt_lower for word in ['strategy', 'tower', 'defense', 'build']):
            genre = 'strategy'
        
        mechanics = ['movement', 'interaction']
        if 'shoot' in prompt_lower:
            mechanics.append('shooting')
        if 'collect' in prompt_lower:
            mechanics.append('collection')
        if 'jump' in prompt_lower:
            mechanics.append('jumping')
        if 'avoid' in prompt_lower:
            mechanics.append('avoidance')
        
        theme = 'modern'
        if any(word in prompt_lower for word in ['space', 'alien', 'cosmic', 'galaxy']):
            theme = 'sci-fi'
        elif any(word in prompt_lower for word in ['magic', 'fantasy', 'dragon', 'wizard']):
            theme = 'fantasy'
        elif any(word in prompt_lower for word in ['retro', '8-bit', 'pixel', 'classic']):
            theme = 'retro'
        
        return GameConcept(
            genre=genre,
            mechanics=mechanics,
            theme=theme,
            visual_style='modern',
            complexity='medium',
            objective='Complete the challenge and achieve high score',
            target_audience='all',
            estimated_playtime='5-15min'
        )
    
    def _fallback_template(self, concept: GameConcept) -> GameTemplate:
        """Fallback template when AI fails"""
        
        # Generate color palette based on theme
        color_palettes = {
            'sci-fi': ['#00ffff', '#ff00ff', '#ffff00', '#00ff00'],
            'fantasy': ['#8b4513', '#228b22', '#ffd700', '#9370db'],
            'retro': ['#ff6b6b', '#4ecdc4', '#45b7d1', '#f9ca24'],
            'modern': ['#3498db', '#e74c3c', '#2ecc71', '#f39c12']
        }
        
        colors = color_palettes.get(concept.theme, color_palettes['modern'])
        
        return GameTemplate(
            concept=concept,
            game_structure={
                'title': f'{concept.theme.title()} {concept.genre.title()} Adventure',
                'rules': [
                    'Use arrow keys or touch to move',
                    'Collect items to increase score',
                    'Avoid obstacles and enemies',
                    'Survive as long as possible'
                ],
                'win_condition': 'Achieve target score or complete all levels',
                'lose_condition': 'Health reaches zero or time runs out',
                'scoring_system': 'Points for collection, survival time, and special actions',
                'difficulty_progression': 'Speed and enemy count increase over time'
            },
            visual_design={
                'color_palette': colors,
                'background_style': f'linear-gradient(135deg, {colors[0]} 0%, {colors[1]} 100%)',
                'player_design': f'Rounded rectangle with gradient from {colors[2]} to {colors[3]}',
                'enemy_design': f'Angular shapes with contrasting colors {colors[1]} and {colors[0]}',
                'ui_style': 'Modern flat design with subtle shadows and {colors[2]} accents',
                'animation_style': 'Smooth CSS transitions with easing functions'
            },
            gameplay_mechanics={
                'movement': 'Smooth directional movement with momentum',
                'interaction': 'Collision-based with visual feedback',
                'physics': 'Basic 2D movement with optional gravity',
                'collision': 'Bounding box detection with overlap calculation',
                'spawning': 'Random intervals with increasing frequency',
                'progression': 'Gradual difficulty increase with level system'
            },
            ui_elements={
                'hud': ['score', 'health', 'level', 'time'],
                'controls': 'Arrow keys, WASD, or touch/swipe gestures',
                'feedback': 'Score popups, screen shake, particle effects',
                'menus': 'Start screen, pause menu, game over screen'
            },
            code_architecture={
                'html_structure': 'Game container with canvas, UI overlay, and control elements',
                'css_classes': ['game-container', 'player', 'enemy', 'collectible', 'ui-element', 'particle'],
                'js_functions': ['gameLoop', 'handleInput', 'checkCollisions', 'updateScore', 'spawnEnemies', 'updateUI'],
                'game_loop': 'RequestAnimationFrame-based loop with delta time',
                'event_handling': 'Keyboard, mouse, and touch event listeners with mobile support'
            }
        )
    
    def validate_template(self, template: GameTemplate) -> bool:
        """Validate that template has all required components"""
        required_sections = ['game_structure', 'visual_design', 'gameplay_mechanics', 'ui_elements', 'code_architecture']
        
        for section in required_sections:
            if not hasattr(template, section) or not getattr(template, section):
                return False
        
        # Validate color palette
        colors = template.visual_design.get('color_palette', [])
        if not colors or len(colors) < 3:
            return False
        
        # Validate hex colors
        for color in colors:
            if not re.match(r'^#[0-9A-Fa-f]{6}$', color):
                return False
        
        return True
    
    def get_template_summary(self, template: GameTemplate) -> Dict[str, Any]:
        """Generate a summary of the template for preview"""
        return {
            'title': template.game_structure.get('title', 'Untitled Game'),
            'genre': template.concept.genre,
            'complexity': template.concept.complexity,
            'mechanics': template.concept.mechanics,
            'visual_style': template.concept.visual_style,
            'estimated_quality': '8-9/10',
            'features': len(template.gameplay_mechanics),
            'color_palette': template.visual_design.get('color_palette', []),
            'objective': template.concept.objective,
            'ai_powered': True,
            'free_generation': True
        }

